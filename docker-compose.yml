version: "3.9"

services:
  db:
    image: postgres:16
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  backend:
    build:
      context: ./backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_AI_AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      SPRING_AI_AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      SPRING_AI_AZURE_OPENAI_CHAT_OPTIONS_DEPLOYMENT_NAME: ${AZURE_OPENAI_CHAT_DEPLOYMENT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:8080"
    healthcheck:
      test: ["CMD", "bash", "-c", "wget -qO- http://localhost:8080/actuator/health | grep 'UP' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  frontend:
    build:
      context: ./frontend
    environment:
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT}:8080"
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  db-data: